# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export DOTFILES="${HOME}/.dotfiles"
export PATH=$PATH:~/.local/bin

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=5000
SAVEHIST=5000
setopt appendhistory
bindkey -e
# End of lines configured by zsh-newuser-install

# The following lines were added by compinstall
zstyle :compinstall filename '~/.zshrc'
# End of lines added by compinstall

# Do not store commands starting with space into history
setopt HIST_IGNORE_SPACE

# * Configuration and theme.

# Enable completion for new installed command within the session by
# not trust the zsh's cache of executable command, and forced it be
# updated
zstyle ":completion:*:commands" rehash 1
autoload -U compinit && compinit

# ** theme
## Before, install patched powerline (https://github.com/powerline/powerline). Follow installation instruction on the site
#if [[ $TERM == "rxvt-unicode-256color" ]]; then
#  ZSH_THEME=kolo
#elif [[ $TERM == "xterm" || $TERM == "xterm-256color" || $TERM == "xterm-kitty" ]]; then
#  ZSH_THEME=agnoster
#  if [[ $TERM == "xterm-kitty" ]]; then
#    # Completion for kitty
#    kitty + complete setup zsh | source /dev/stdin
#  fi
#else
#  ZSH_THEME=kolo
#fi

# ** prefix prompt
export DEFAULT_USER="$USER"
export EDITOR="nano"
export PAGER="less"

## Keybinding
typeset -A key
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}

autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

[[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
[[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
[[ -n ${key[Up]} ]] && bindkey "${key[Up]}" up-line-or-beginning-search
[[ -n ${key[Down]} ]] && bindkey "${key[Down]}" down-line-or-beginning-search
bindkey '^U' backward-kill-line

# ** plugins
plugins=(git git-extras mercurial sudo command-not-found virtualenv pip)

# Pipenv
#>> git clone https://github.com/owenstranathan/pipenv.zsh $ZSH_CUSTOM/plugins/pipenv
#plugins+=pipenv

# Completions
#>> git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions
plugins+=zsh-completions

# Auto-suggestions
#>> git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions
plugins+=zsh-autosuggestions

# Last operations
# * Zsh-Highlight
#>> git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting
plugins+=zsh-syntax-highlighting

# Better zsh history search Ctrl+R with fzf
#>> git clone https://github.com/joshskidmore/zsh-fzf-history-search ${ZSH_CUSTOM}/plugins/zsh-fzf-history-search
plugins+=zsh-fzf-history-search

# Import oh-my-zsh
export ZSH=$HOME/.oh-my-zsh
source $ZSH/oh-my-zsh.sh

# Plugins configuration (after sourcing)
# Widgets that clear the suggestion
ZSH_AUTOSUGGEST_CLEAR_WIDGETS=(
	history-search-forward
	history-search-backward
	up-line-or-beginning-search
	down-line-or-beginning-search
	history-beginning-search-forward
	history-beginning-search-backward
	history-substring-search-up
	history-substring-search-down
	up-line-or-history
	down-line-or-history
	accept-line
)
# Widgets that accept the entire suggestion
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(
	end-of-line
)
# Widgets that accept the suggestion as far as the cursor moves
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(
	forward-char
	forward-word
	emacs-forward-word
)

# fzf height
ZSH_FZF_HISTORY_SEARCH_FZF_EXTRA_ARGS="--height=50%"
bindkey '^s' fzf_history_search

# Set keyboard layout
#setxkbmap int -variant colemak

# pip completion, if not installed globally
if [[ ! -f /usr/share/zsh/site-functions/_pip && ! -f "$HOME/.oh-my-zsh/custom/completions/_pip" ]]; then
    mkdir -p "$HOME/.oh-my-zsh/custom/completions"
    python -m pip completion --zsh | tail -n+3 | tee "$HOME/.oh-my-zsh/custom/completions/_pip"
fi

# chezmoi completion, if not installed globally
if [[ ! -f /usr/share/zsh/site-functions/_chezmoi && ! -f "$HOME/.oh-my-zsh/custom/completions/_chezmoi" ]]; then
    mkdir -p "$HOME/.oh-my-zsh/custom/completions"
    chezmoi completion zsh --output="$HOME/.oh-my-zsh/custom/completions/_chezmoi"
fi

# "sharkdp/fd" file finder, modern replacement for GNU find
export FD_OPTIONS="--hidden --follow --exclude .git --exclude node_modules"

# load Powerlevel10k
#source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
source ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/themes/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
if [[ $TERM == "xterm" || $TERM == "xterm-256color" || $TERM == "xterm-kitty" ]]; then
  [[ ! -f ~/.p10k-xterm.zsh ]] || source ~/.p10k-xterm.zsh
else
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
fi
POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true

# ~~ AFTER SOURCING P10K ~~
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.aliases ]; then
    . ~/.aliases
fi

# Conda init
if [ -f /opt/miniconda3 ]; then
    CONDA_INSTALL_DIR="/opt/miniconda3"
elif [ -f ~/miniforge3 ]; then
    CONDA_INSTALL_DIR="~/miniforge3"
elif [ -f ~/miniconda3 ]; then
    CONDA_INSTALL_DIR="~/miniconda3"
fi

start_conda () {
    __conda_setup="$(\"$CONDA_INSTALL_DIR/bin/conda\" 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "$CONDA_INSTALL_DIR/etc/profile.d/conda.sh" ]; then
            . "$CONDA_INSTALL_DIR/etc/profile.d/conda.sh"
        else
            export PATH="$CONDA_INSTALL_DIR/bin:$PATH"
        fi
    fi
    unset __conda_setup
    POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=anaconda
    # see ~/.p10k.zsh for how to change the anaconda prompt segment
    # modify POWERLEVEL9K_ANACONDA_CONTENT_EXPANSION to:
    # POWERLEVEL9K_ANACONDA_CONTENT_EXPANSION='${${${${CONDA_PROMPT_MODIFIER#\(}% }%\)}:-${CONDA_PREFIX:t}} : v${P9K_ANACONDA_PYTHON_VERSION}'
}

stop_conda () {
    # Remove any path starting with "${CONDA_INSTALL_DIR}" from PATH
    conda deactivate
    conda deactivate
    export PATH=$( python -c "import os; path = os.environ['PATH'].split(':'); print(':'.join(p for p in path if "$CONDA_INSTALL_DIR" not in p))" )
#    POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=("${POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS[@]/anaconda}")
}

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# <<< conda initialize <<<

{{ if eq .chezmoi.osRelease.id "ubuntu" -}}
export PATH="$PATH:$HOME/.cargo/bin"
{{ end -}}

